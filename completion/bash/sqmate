#!/bin/bash
################################################################################
# SQMATE Bash Completion Script                                                #
# Provides tab completion for SQMATE commands, options, and MySQL/MariaDB     #
# installation directories                                                     #
################################################################################

_sqmate_completion() {
    local cur prev words cword
    _init_completion || return

    # SQMATE config directory
    local CONFIG_DIR="${SQMATE_CONFIG_DIR:-${HOME}/.config/sqmate}"

    # Main commands
    local commands="init start stop restart status connect logs config help version"

    # Options for various commands
    local init_opts="--sql-dir --profile --debug"
    local start_opts="--host --port --profile --debug"
    local stop_opts="--profile --debug"
    local restart_opts="--host --port --profile --debug"
    local status_opts="--profile --debug"
    local connect_opts="--profile --debug"
    local logs_opts="--profile --debug"
    local config_opts="--profile --debug"

    # Helper function to get profiles
    _get_profiles() {
        if [[ -d "$CONFIG_DIR" ]]; then
            find "$CONFIG_DIR" -type f -name "config_*" -print0 2> /dev/null | while IFS= read -r -d $'\0' cfg_file; do
                basename "$cfg_file" | sed 's/^config_//'
            done | sort -u
        fi
    }

    # Helper function to find potential MySQL/MariaDB directories
    _get_sql_dirs() {
        local suggestions=()
        
        # Common installation paths
        local common_paths=(
            "/opt/mysql*"
            "/opt/mariadb*"
            "/usr/local/mysql*"
            "/usr/local/mariadb*"
            "$HOME/mysql*"
            "$HOME/mariadb*"
        )
        
        for path_pattern in "${common_paths[@]}"; do
            for dir in $path_pattern 2>/dev/null; do
                if [[ -d "$dir" && -f "$dir/bin/mysqld" ]]; then
                    suggestions+=("$dir")
                fi
            done
        done
        
        # Add directory completion as fallback
        COMPREPLY+=($(compgen -d -- "$cur"))
        
        # Add found SQL directories
        if [[ ${#suggestions[@]} -gt 0 ]]; then
            COMPREPLY+=($(compgen -W "${suggestions[*]}" -- "$cur"))
        fi
    }

    # Helper function to validate and suggest ports
    _get_port_suggestions() {
        local port_suggestions="3306 3307 3308 3309 3310"
        COMPREPLY=($(compgen -W "$port_suggestions" -- "$cur"))
    }

    # Helper function to suggest hostnames
    _get_host_suggestions() {
        local host_suggestions="localhost 127.0.0.1 0.0.0.0"
        COMPREPLY=($(compgen -W "$host_suggestions" -- "$cur"))
    }

    # First level: Main commands
    if [[ "$cword" -eq 1 ]]; then
        COMPREPLY=($(compgen -W "$commands" -- "$cur"))
        return
    fi

    # Handle command-specific options
    local command="${words[1]}"

    case "$command" in
        init)
            if [[ "$prev" == "--sql-dir" ]]; then
                _get_sql_dirs
            elif [[ "$prev" == "--profile" ]]; then
                COMPREPLY=($(compgen -W "$(_get_profiles)" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$init_opts" -- "$cur"))
            fi
            ;;

        start)
            # Handle hostname:port format
            if [[ "$prev" == "start" && "$cur" =~ ^[a-zA-Z0-9.-]*:[0-9]*$ ]]; then
                # Don't interfere with hostname:port input
                return
            elif [[ "$prev" == "--host" ]]; then
                _get_host_suggestions
            elif [[ "$prev" == "--port" ]]; then
                _get_port_suggestions
            elif [[ "$prev" == "--profile" ]]; then
                COMPREPLY=($(compgen -W "$(_get_profiles)" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$start_opts" -- "$cur"))
            fi
            ;;

        stop)
            if [[ "$prev" == "--profile" ]]; then
                COMPREPLY=($(compgen -W "$(_get_profiles)" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$stop_opts" -- "$cur"))
            fi
            ;;

        restart)
            # Handle hostname:port format
            if [[ "$prev" == "restart" && "$cur" =~ ^[a-zA-Z0-9.-]*:[0-9]*$ ]]; then
                # Don't interfere with hostname:port input
                return
            elif [[ "$prev" == "--host" ]]; then
                _get_host_suggestions
            elif [[ "$prev" == "--port" ]]; then
                _get_port_suggestions
            elif [[ "$prev" == "--profile" ]]; then
                COMPREPLY=($(compgen -W "$(_get_profiles)" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$restart_opts" -- "$cur"))
            fi
            ;;

        status)
            if [[ "$prev" == "--profile" ]]; then
                COMPREPLY=($(compgen -W "$(_get_profiles)" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$status_opts" -- "$cur"))
            fi
            ;;

        connect)
            if [[ "$prev" == "--profile" ]]; then
                COMPREPLY=($(compgen -W "$(_get_profiles)" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$connect_opts" -- "$cur"))
            fi
            ;;

        logs)
            if [[ "$prev" == "--profile" ]]; then
                COMPREPLY=($(compgen -W "$(_get_profiles)" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$logs_opts" -- "$cur"))
            fi
            ;;

        config)
            if [[ "$prev" == "--profile" ]]; then
                COMPREPLY=($(compgen -W "$(_get_profiles)" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$config_opts" -- "$cur"))
            fi
            ;;

        help | version)
            COMPREPLY=()
            ;;
    esac

    return 0
}

# Register the completion function for the 'sqmate' command
complete -F _sqmate_completion sqmate